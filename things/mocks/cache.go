// Code generated by mockery v2.42.3. DO NOT EDIT.

// Copyright (c) Abstract Machines

package mocks

import (
	context "context"

	errors "github.com/absmach/magistrala/pkg/errors"
	mock "github.com/stretchr/testify/mock"
)

// Cache is an autogenerated mock type for the Cache type
type Cache struct {
	mock.Mock
}

// ID provides a mock function with given fields: ctx, thingSecret
func (_m *Cache) ID(ctx context.Context, thingSecret string) (string, errors.Error) {
	ret := _m.Called(ctx, thingSecret)

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 string
	var r1 errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, errors.Error)); ok {
		return rf(ctx, thingSecret)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, thingSecret)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) errors.Error); ok {
		r1 = rf(ctx, thingSecret)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.Error)
		}
	}

	return r0, r1
}

// Remove provides a mock function with given fields: ctx, thingID
func (_m *Cache) Remove(ctx context.Context, thingID string) errors.Error {
	ret := _m.Called(ctx, thingID)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, string) errors.Error); ok {
		r0 = rf(ctx, thingID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.Error)
		}
	}

	return r0
}

// Save provides a mock function with given fields: ctx, thingSecret, thingID
func (_m *Cache) Save(ctx context.Context, thingSecret string, thingID string) errors.Error {
	ret := _m.Called(ctx, thingSecret, thingID)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 errors.Error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) errors.Error); ok {
		r0 = rf(ctx, thingSecret, thingID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.Error)
		}
	}

	return r0
}

// NewCache creates a new instance of Cache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *Cache {
	mock := &Cache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
