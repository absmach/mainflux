// Code generated by mockery v2.43.2. DO NOT EDIT.

// Copyright (c) Abstract Machines

package mocks

import (
	auth "github.com/absmach/magistrala/auth"
	authn "github.com/absmach/magistrala/pkg/authn"

	context "context"

	mock "github.com/stretchr/testify/mock"

	policies "github.com/absmach/magistrala/pkg/policies"

	time "time"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// AddPATScopeEntry provides a mock function with given fields: ctx, session, patID, platformEntityType, optionalDomainID, optionalDomainEntityType, operation, entityIDs
func (_m *Service) AddPATScopeEntry(ctx context.Context, session authn.Session, patID string, platformEntityType auth.PlatformEntityType, optionalDomainID string, optionalDomainEntityType auth.DomainEntityType, operation auth.OperationType, entityIDs ...string) (auth.Scope, error) {
	_va := make([]interface{}, len(entityIDs))
	for _i := range entityIDs {
		_va[_i] = entityIDs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, session, patID, platformEntityType, optionalDomainID, optionalDomainEntityType, operation)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddPATScopeEntry")
	}

	var r0 auth.Scope
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, authn.Session, string, auth.PlatformEntityType, string, auth.DomainEntityType, auth.OperationType, ...string) (auth.Scope, error)); ok {
		return rf(ctx, session, patID, platformEntityType, optionalDomainID, optionalDomainEntityType, operation, entityIDs...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, authn.Session, string, auth.PlatformEntityType, string, auth.DomainEntityType, auth.OperationType, ...string) auth.Scope); ok {
		r0 = rf(ctx, session, patID, platformEntityType, optionalDomainID, optionalDomainEntityType, operation, entityIDs...)
	} else {
		r0 = ret.Get(0).(auth.Scope)
	}

	if rf, ok := ret.Get(1).(func(context.Context, authn.Session, string, auth.PlatformEntityType, string, auth.DomainEntityType, auth.OperationType, ...string) error); ok {
		r1 = rf(ctx, session, patID, platformEntityType, optionalDomainID, optionalDomainEntityType, operation, entityIDs...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Authorize provides a mock function with given fields: ctx, pr
func (_m *Service) Authorize(ctx context.Context, pr policies.Policy) error {
	ret := _m.Called(ctx, pr)

	if len(ret) == 0 {
		panic("no return value specified for Authorize")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, policies.Policy) error); ok {
		r0 = rf(ctx, pr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthorizePAT provides a mock function with given fields: ctx, paToken, platformEntityType, optionalDomainID, optionalDomainEntityType, operation, entityIDs
func (_m *Service) AuthorizePAT(ctx context.Context, paToken string, platformEntityType auth.PlatformEntityType, optionalDomainID string, optionalDomainEntityType auth.DomainEntityType, operation auth.OperationType, entityIDs ...string) error {
	_va := make([]interface{}, len(entityIDs))
	for _i := range entityIDs {
		_va[_i] = entityIDs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, paToken, platformEntityType, optionalDomainID, optionalDomainEntityType, operation)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AuthorizePAT")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, auth.PlatformEntityType, string, auth.DomainEntityType, auth.OperationType, ...string) error); ok {
		r0 = rf(ctx, paToken, platformEntityType, optionalDomainID, optionalDomainEntityType, operation, entityIDs...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckPAT provides a mock function with given fields: ctx, userID, patID, platformEntityType, optionalDomainID, optionalDomainEntityType, operation, entityIDs
func (_m *Service) CheckPAT(ctx context.Context, userID string, patID string, platformEntityType auth.PlatformEntityType, optionalDomainID string, optionalDomainEntityType auth.DomainEntityType, operation auth.OperationType, entityIDs ...string) error {
	_va := make([]interface{}, len(entityIDs))
	for _i := range entityIDs {
		_va[_i] = entityIDs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, userID, patID, platformEntityType, optionalDomainID, optionalDomainEntityType, operation)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CheckPAT")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, auth.PlatformEntityType, string, auth.DomainEntityType, auth.OperationType, ...string) error); ok {
		r0 = rf(ctx, userID, patID, platformEntityType, optionalDomainID, optionalDomainEntityType, operation, entityIDs...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClearPATAllScopeEntry provides a mock function with given fields: ctx, session, patID
func (_m *Service) ClearPATAllScopeEntry(ctx context.Context, session authn.Session, patID string) error {
	ret := _m.Called(ctx, session, patID)

	if len(ret) == 0 {
		panic("no return value specified for ClearPATAllScopeEntry")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, authn.Session, string) error); ok {
		r0 = rf(ctx, session, patID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePAT provides a mock function with given fields: ctx, session, name, description, duration, scope
func (_m *Service) CreatePAT(ctx context.Context, session authn.Session, name string, description string, duration time.Duration, scope auth.Scope) (auth.PAT, error) {
	ret := _m.Called(ctx, session, name, description, duration, scope)

	if len(ret) == 0 {
		panic("no return value specified for CreatePAT")
	}

	var r0 auth.PAT
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, authn.Session, string, string, time.Duration, auth.Scope) (auth.PAT, error)); ok {
		return rf(ctx, session, name, description, duration, scope)
	}
	if rf, ok := ret.Get(0).(func(context.Context, authn.Session, string, string, time.Duration, auth.Scope) auth.PAT); ok {
		r0 = rf(ctx, session, name, description, duration, scope)
	} else {
		r0 = ret.Get(0).(auth.PAT)
	}

	if rf, ok := ret.Get(1).(func(context.Context, authn.Session, string, string, time.Duration, auth.Scope) error); ok {
		r1 = rf(ctx, session, name, description, duration, scope)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePAT provides a mock function with given fields: ctx, session, patID
func (_m *Service) DeletePAT(ctx context.Context, session authn.Session, patID string) error {
	ret := _m.Called(ctx, session, patID)

	if len(ret) == 0 {
		panic("no return value specified for DeletePAT")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, authn.Session, string) error); ok {
		r0 = rf(ctx, session, patID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Identify provides a mock function with given fields: ctx, token
func (_m *Service) Identify(ctx context.Context, token string) (auth.Key, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for Identify")
	}

	var r0 auth.Key
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (auth.Key, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) auth.Key); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(auth.Key)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IdentifyPAT provides a mock function with given fields: ctx, paToken
func (_m *Service) IdentifyPAT(ctx context.Context, paToken string) (auth.PAT, error) {
	ret := _m.Called(ctx, paToken)

	if len(ret) == 0 {
		panic("no return value specified for IdentifyPAT")
	}

	var r0 auth.PAT
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (auth.PAT, error)); ok {
		return rf(ctx, paToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) auth.PAT); ok {
		r0 = rf(ctx, paToken)
	} else {
		r0 = ret.Get(0).(auth.PAT)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, paToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Issue provides a mock function with given fields: ctx, token, key
func (_m *Service) Issue(ctx context.Context, token string, key auth.Key) (auth.Token, error) {
	ret := _m.Called(ctx, token, key)

	if len(ret) == 0 {
		panic("no return value specified for Issue")
	}

	var r0 auth.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, auth.Key) (auth.Token, error)); ok {
		return rf(ctx, token, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, auth.Key) auth.Token); ok {
		r0 = rf(ctx, token, key)
	} else {
		r0 = ret.Get(0).(auth.Token)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, auth.Key) error); ok {
		r1 = rf(ctx, token, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPATS provides a mock function with given fields: ctx, session, pm
func (_m *Service) ListPATS(ctx context.Context, session authn.Session, pm auth.PATSPageMeta) (auth.PATSPage, error) {
	ret := _m.Called(ctx, session, pm)

	if len(ret) == 0 {
		panic("no return value specified for ListPATS")
	}

	var r0 auth.PATSPage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, authn.Session, auth.PATSPageMeta) (auth.PATSPage, error)); ok {
		return rf(ctx, session, pm)
	}
	if rf, ok := ret.Get(0).(func(context.Context, authn.Session, auth.PATSPageMeta) auth.PATSPage); ok {
		r0 = rf(ctx, session, pm)
	} else {
		r0 = ret.Get(0).(auth.PATSPage)
	}

	if rf, ok := ret.Get(1).(func(context.Context, authn.Session, auth.PATSPageMeta) error); ok {
		r1 = rf(ctx, session, pm)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemovePATScopeEntry provides a mock function with given fields: ctx, session, patID, platformEntityType, optionalDomainID, optionalDomainEntityType, operation, entityIDs
func (_m *Service) RemovePATScopeEntry(ctx context.Context, session authn.Session, patID string, platformEntityType auth.PlatformEntityType, optionalDomainID string, optionalDomainEntityType auth.DomainEntityType, operation auth.OperationType, entityIDs ...string) (auth.Scope, error) {
	_va := make([]interface{}, len(entityIDs))
	for _i := range entityIDs {
		_va[_i] = entityIDs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, session, patID, platformEntityType, optionalDomainID, optionalDomainEntityType, operation)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemovePATScopeEntry")
	}

	var r0 auth.Scope
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, authn.Session, string, auth.PlatformEntityType, string, auth.DomainEntityType, auth.OperationType, ...string) (auth.Scope, error)); ok {
		return rf(ctx, session, patID, platformEntityType, optionalDomainID, optionalDomainEntityType, operation, entityIDs...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, authn.Session, string, auth.PlatformEntityType, string, auth.DomainEntityType, auth.OperationType, ...string) auth.Scope); ok {
		r0 = rf(ctx, session, patID, platformEntityType, optionalDomainID, optionalDomainEntityType, operation, entityIDs...)
	} else {
		r0 = ret.Get(0).(auth.Scope)
	}

	if rf, ok := ret.Get(1).(func(context.Context, authn.Session, string, auth.PlatformEntityType, string, auth.DomainEntityType, auth.OperationType, ...string) error); ok {
		r1 = rf(ctx, session, patID, platformEntityType, optionalDomainID, optionalDomainEntityType, operation, entityIDs...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetPATSecret provides a mock function with given fields: ctx, session, patID, duration
func (_m *Service) ResetPATSecret(ctx context.Context, session authn.Session, patID string, duration time.Duration) (auth.PAT, error) {
	ret := _m.Called(ctx, session, patID, duration)

	if len(ret) == 0 {
		panic("no return value specified for ResetPATSecret")
	}

	var r0 auth.PAT
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, authn.Session, string, time.Duration) (auth.PAT, error)); ok {
		return rf(ctx, session, patID, duration)
	}
	if rf, ok := ret.Get(0).(func(context.Context, authn.Session, string, time.Duration) auth.PAT); ok {
		r0 = rf(ctx, session, patID, duration)
	} else {
		r0 = ret.Get(0).(auth.PAT)
	}

	if rf, ok := ret.Get(1).(func(context.Context, authn.Session, string, time.Duration) error); ok {
		r1 = rf(ctx, session, patID, duration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveKey provides a mock function with given fields: ctx, token, id
func (_m *Service) RetrieveKey(ctx context.Context, token string, id string) (auth.Key, error) {
	ret := _m.Called(ctx, token, id)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveKey")
	}

	var r0 auth.Key
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (auth.Key, error)); ok {
		return rf(ctx, token, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) auth.Key); ok {
		r0 = rf(ctx, token, id)
	} else {
		r0 = ret.Get(0).(auth.Key)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, token, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrievePAT provides a mock function with given fields: ctx, session, patID
func (_m *Service) RetrievePAT(ctx context.Context, session authn.Session, patID string) (auth.PAT, error) {
	ret := _m.Called(ctx, session, patID)

	if len(ret) == 0 {
		panic("no return value specified for RetrievePAT")
	}

	var r0 auth.PAT
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, authn.Session, string) (auth.PAT, error)); ok {
		return rf(ctx, session, patID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, authn.Session, string) auth.PAT); ok {
		r0 = rf(ctx, session, patID)
	} else {
		r0 = ret.Get(0).(auth.PAT)
	}

	if rf, ok := ret.Get(1).(func(context.Context, authn.Session, string) error); ok {
		r1 = rf(ctx, session, patID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Revoke provides a mock function with given fields: ctx, token, id
func (_m *Service) Revoke(ctx context.Context, token string, id string) error {
	ret := _m.Called(ctx, token, id)

	if len(ret) == 0 {
		panic("no return value specified for Revoke")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, token, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RevokePATSecret provides a mock function with given fields: ctx, session, patID
func (_m *Service) RevokePATSecret(ctx context.Context, session authn.Session, patID string) error {
	ret := _m.Called(ctx, session, patID)

	if len(ret) == 0 {
		panic("no return value specified for RevokePATSecret")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, authn.Session, string) error); ok {
		r0 = rf(ctx, session, patID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePATDescription provides a mock function with given fields: ctx, session, patID, description
func (_m *Service) UpdatePATDescription(ctx context.Context, session authn.Session, patID string, description string) (auth.PAT, error) {
	ret := _m.Called(ctx, session, patID, description)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePATDescription")
	}

	var r0 auth.PAT
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, authn.Session, string, string) (auth.PAT, error)); ok {
		return rf(ctx, session, patID, description)
	}
	if rf, ok := ret.Get(0).(func(context.Context, authn.Session, string, string) auth.PAT); ok {
		r0 = rf(ctx, session, patID, description)
	} else {
		r0 = ret.Get(0).(auth.PAT)
	}

	if rf, ok := ret.Get(1).(func(context.Context, authn.Session, string, string) error); ok {
		r1 = rf(ctx, session, patID, description)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePATName provides a mock function with given fields: ctx, session, patID, name
func (_m *Service) UpdatePATName(ctx context.Context, session authn.Session, patID string, name string) (auth.PAT, error) {
	ret := _m.Called(ctx, session, patID, name)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePATName")
	}

	var r0 auth.PAT
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, authn.Session, string, string) (auth.PAT, error)); ok {
		return rf(ctx, session, patID, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, authn.Session, string, string) auth.PAT); ok {
		r0 = rf(ctx, session, patID, name)
	} else {
		r0 = ret.Get(0).(auth.PAT)
	}

	if rf, ok := ret.Get(1).(func(context.Context, authn.Session, string, string) error); ok {
		r1 = rf(ctx, session, patID, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
