openapi: 3.0.3
info:
  title: Ultraviolet clients service
  description: |
    This is the Clients Server based on the OpenAPI 3.0 specification.  It is the HTTP API for managing platform clients. You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    Some useful links:
    - [The Clients repository](https://github.com/ultravioletrs/clients)
    - [The Clients Postman Collection](https://github.com/ultravioletrs/clients/blob/main/postman/postman.yaml)
  contact:
    email: info@mainflux.com
  license:
    name: Apache 2.0
    url: https://github.com/ultravioletrs/clients/blob/main/LICENSE
  version: 1.0.0

servers:
  - url: http://localhost:9191
  - url: https://localhost:9191

tags:
  - name: Clients
    description: Everything about your Clients
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: Groups
    description: Everything about your Groups
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: Policies
    description: Access to client policies
    externalDocs:
      description: Find out more about our store
      url: http://swagger.io

paths:
  /clients:
    post:
      tags:
        - Clients
      summary: Registers client account
      description: |
        Registers new client account given identity and secret. New account will
        be uniquely identified by its identity.
      requestBody:
        $ref: "#/components/requestBodies/ClientCreateReq"
      responses:
        '201':
          $ref: "#/components/responses/ClientCreateRes"
        '400':
          description: Failed due to malformed JSON.
        '401':
          description: Missing or invalid access token provided.
        '409':
          description: Failed due to using an existing identity.
        '415':
          description: Missing or invalid content type.
        '500':
          $ref: "#/components/responses/ServiceError"
    get:
      tags:
        - Clients
      summary: List clients
      description: |
        Retrieves a list of clients. Due to performance concerns, data
        is retrieved in subsets. The API client must ensure that the entire
        dataset is consumed either by making subsequent requests, or by
        increasing the subset size of the initial request.
      parameters:
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Metadata"
        - $ref: "#/components/parameters/Status"
        - $ref: "#/components/parameters/ClientName"
        - $ref: "#/components/parameters/ClientIdentifier"
        - $ref: "#/components/parameters/Tags"
        - $ref: "#/components/parameters/ClientSharedBy"
        - $ref: "#/components/parameters/ClientVisibility"
        
      security:
        - bearerAuth: []
      responses:
        '200':
          $ref: "#/components/responses/ClientPageRes"
        '400':
          description: Failed due to malformed query parameters.
        '401':
          description: |
            Missing or invalid access token provided.
            This endpoint is available only for administrators.
        '404':
          description: A non-existent entity request.
        '422':
          description: Database can't process request.
        '500':
          $ref: "#/components/responses/ServiceError"
  /clients/{clientId}:
    get:
      summary: Retrieves a client
      description: |
        Retrieves a specific client that is identifier by the client ID.
      tags:
        - Clients
      parameters:
        - $ref: "#/components/parameters/ClientId"
      security:
        - bearerAuth: []
      responses:
        '200':
          $ref: "#/components/responses/ClientRes"
        '400':
          description: Failed due to malformed query parameters.
        '401':
          description: Missing or invalid access token provided.
        '404':
          description: A non-existent entity request.
        '422':
          description: Database can't process request.
        '500':
          $ref: "#/components/responses/ServiceError"
    patch:
      summary: Updates name and metadata of the client.
      description: |
        Updates name and metadata of the client with provided ID. Name and metadata
        is updated using authorization token and the new received info.
      tags:
        - Clients
      parameters:
        - $ref: "#/components/parameters/ClientId"
      requestBody:
        $ref: "#/components/requestBodies/ClientUpdateReq"
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Client updated.
        '400':
          description: Failed due to malformed JSON.
        '404':
          description: Failed due to non existing client.
        '401':
          description: Missing or invalid access token provided.
        '500':
         $ref: "#/components/responses/ServiceError"

  /clients/{clientId}/tags:
    patch:
      summary: Updates tags the client.
      description: |
        Updates tags of the client with provided ID. Tags is updated using
        authorization token and the new tags received in request.
      tags:
        - Clients
      parameters:
        - $ref: "#/components/parameters/ClientId"
      requestBody:
        $ref: "#/components/requestBodies/ClientUpdateTagsReq"
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Client updated.
        '400':
          description: Failed due to malformed JSON.
        '404':
          description: Failed due to non existing client.
        '401':
          description: Missing or invalid access token provided.
        '500':
         $ref: "#/components/responses/ServiceError"
  /clients/{clientId}/identity:
    patch:
      summary: Updates Identity of the client.
      description: |
        Updates identity of the client with provided ID. Identity is
        updated using authorization token and the new received identity.
      tags:
        - Clients
      parameters:
        - $ref: "#/components/parameters/ClientId"
      requestBody:
        $ref: "#/components/requestBodies/ClientUpdateIdentityReq"
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Client updated.
        '400':
          description: Failed due to malformed JSON.
        '404':
          description: Failed due to non existing client.
        '401':
          description: Missing or invalid access token provided.
        '500':
         $ref: "#/components/responses/ServiceError"

  /clients/{clientId}/secret:
    patch:
      summary: Updates Secret of currently logged in client.
      description: |
        Updates secret of currently logged in client. Secret is updated using
        authorization token and the new received info.
      tags:
        - Clients
      parameters:
        - $ref: "#/components/parameters/ClientId"
      requestBody:
        $ref: "#/components/requestBodies/ClientUpdateSecretReq"
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Client updated.
        '400':
          description: Failed due to malformed JSON.
        '404':
          description: Failed due to non existing client.
        '401':
          description: Missing or invalid access token provided.
        '500':
         $ref: "#/components/responses/ServiceError"

  /clients/{clientId}/owner:
    patch:
      summary: Updates the client owner.
      description: |
        Updates owner for the client with provided ID. Owner is updated using
        authorization token and a new owner identifier received in request.
      tags:
        - Clients
      parameters:
        - $ref: "#/components/parameters/ClientId"
      requestBody:
        $ref: "#/components/requestBodies/ClientUpdateOwnerReq"
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Client updated.
        '400':
          description: Failed due to malformed JSON.
        '404':
          description: Failed due to non existing client.
        '401':
          description: Missing or invalid access token provided.
        '500':
         $ref: "#/components/responses/ServiceError"

  /clients/{clientId}/disable:
    post:
      summary: Disables a client
      description: |
        Disables a specific client that is identifier by the client ID.
      tags:
        - Clients
      parameters:
        - $ref: "#/components/parameters/ClientId"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Client updated.
        '400':
          description: Failed due to malformed query parameters.
        '401':
          description: Missing or invalid access token provided.
        '404':
          description: A non-existent entity request.
        '422':
          description: Database can't process request.
        '500':
          $ref: "#/components/responses/ServiceError"

  /clients/{clientId}/enable:
    post:
      summary: Enables a client
      description: |
        Enables a specific client that is identifier by the client ID.
      tags:
        - Clients
      parameters:
        - $ref: "#/components/parameters/ClientId"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Client updated.
        '400':
          description: Failed due to malformed query parameters.
        '401':
          description: Missing or invalid access token provided.
        '404':
          description: A non-existent entity request.
        '422':
          description: Database can't process request.
        '500':
          $ref: "#/components/responses/ServiceError"

  /clients/{clientId}/memberships:
    get:
      tags:
        - Clients
      summary: List memberships
      description: |
        Retrieves a list of groups the client is connected to
      parameters:
        - $ref: "#/components/parameters/ClientId"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Level"
        - $ref: "#/components/parameters/Tree"
        - $ref: "#/components/parameters/Metadata"
        - $ref: "#/components/parameters/GroupName"
        - $ref: "#/components/parameters/ParentId"
        - $ref: "#/components/parameters/OwnerId"
      security:
        - bearerAuth: []
      responses:
        '200':
          $ref: "#/components/responses/MembershipsPageRes"
        '400':
          description: Failed due to malformed query parameters.
        '401':
          description: |
            Missing or invalid access token provided.
            This endpoint is available only for administrators.
        '404':
          description: A non-existent entity request.
        '422':
          description: Database can't process request.
        '500':
          $ref: "#/components/responses/ServiceError"


  /clients/tokens/issue:
    post:
      summary: Issue Token
      description: |
        Issue Access and Refresh Token used for authenticating into the system.
      tags:
        - Clients
      requestBody:
        $ref: "#/components/requestBodies/IssueTokenReq"
      responses:
        '200':
          $ref: "#/components/responses/IssueTokenRes"
        '404':
          description: A non-existent entity request.
        '422':
          description: Database can't process request.
        '500':
          $ref: "#/components/responses/ServiceError"

  /clients/tokens/refresh:
    post:
      summary: Refresh Token
      description: |
        Refreshes Access and Refresh Token used for authenticating into the system.
      tags:
        - Clients
      requestBody:
        $ref: "#/components/requestBodies/RefreshTokenReq"
      responses:
        '200':
          $ref: "#/components/responses/RefreshTokenRes"
        '404':
          description: A non-existent entity request.
        '422':
          description: Database can't process request.
        '500':
          $ref: "#/components/responses/ServiceError"
  /groups:
    post:
      tags:
        - Groups
      summary: Creates new group
      description: |
        Creates new group that can be used for grouping entities. New account will
        be uniquely identified by its identity.
      requestBody:
        $ref: "#/components/requestBodies/GroupCreateReq"
      security:
        - bearerAuth: []
      responses:
        '201':
          $ref: "#/components/responses/GroupCreateRes"
        '400':
          description: Failed due to malformed JSON.
        '401':
          description: Missing or invalid access token provided.
        '409':
          description: Failed due to using an existing identity.
        '415':
          description: Missing or invalid content type.
        '500':
          $ref: "#/components/responses/ServiceError"

    get:
      summary: Lists groups.
      description: |
        Lists groups up to a max level of hierarchy that can be fetched in one
        request ( max level = 5). Result can be filtered by metadata. Groups will
        be returned as JSON array or JSON tree. Due to performance concerns, result
        is returned in subsets.
      tags:
        - Groups
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Level"
        - $ref: "#/components/parameters/Tree"
        - $ref: "#/components/parameters/Metadata"
        - $ref: "#/components/parameters/GroupName"
        - $ref: "#/components/parameters/ParentId"
        - $ref: "#/components/parameters/OwnerId"
      responses:
        '200':
          $ref: "#/components/responses/GroupPageRes"
        '400':
          description: Failed due to malformed query parameters.
        '401':
          description: Missing or invalid access token provided.
        '404':
          description: Group does not exist.
        '500':
          $ref: "#/components/responses/ServiceError"

  /groups/{groupId}:
    get:
      summary: Gets group info.
      description: |
        Gets info on a group specified by id.
      tags:
        - Groups
      parameters:
        - $ref: "#/components/parameters/GroupId"
      security:
        - bearerAuth: []
      responses:
        '200':
          $ref: "#/components/responses/GroupRes"
        '400':
          description: Failed due to malformed query parameters.
        '401':
          description: Missing or invalid access token provided.
        '404':
          description: Group does not exist.
        '500':
          $ref: "#/components/responses/ServiceError"
    put:
      summary: Updates group data.
      description: |
        Updates Name, Description or Metadata of a group.
      tags:
        - Groups
      parameters:
        - $ref: "#/components/parameters/GroupId"
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/GroupUpdateReq"
      responses:
        '200':
          description: Group updated.
        '400':
          description: Failed due to malformed query parameters.
        '401':
          description: Missing or invalid access token provided.
        '404':
          description: Group does not exist.
        '500':
          $ref: "#/components/responses/ServiceError"
    delete:
      summary: Deletes group.
      description: |
        Deletes group. If group is parent and descendant groups do not have any members
        child groups will be deleted. Group cannot be deleted if has members or if
        any descendant group has members.
      tags:
        - Groups
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/GroupId"
        - $ref: "#/components/parameters/Level"
        - $ref: "#/components/parameters/Metadata"
        - $ref: "#/components/parameters/Tree"
      responses:
        '204':
          description: Group removed.
        '400':
          description: Failed due to malformed query parameters.
        '401':
          description: Missing or invalid access token provided.
        '404':
          description: Group does not exist.
        '500':
          $ref: "#/components/responses/ServiceError"
  /groups/{groupId}/enable:
    post:
      summary: Enables a group
      description: |
        Enables a specific group that is identifier by the group ID.
      tags:
        - Groups
      parameters:
        - $ref: "#/components/parameters/GroupId"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Group updated.
        '400':
          description: Failed due to malformed query parameters.
        '401':
          description: Missing or invalid access token provided.
        '404':
          description: A non-existent entity request.
        '422':
          description: Database can't process request.
        '500':
          $ref: "#/components/responses/ServiceError"
  /groups/{groupId}/disable:
    post:
      summary: Disables a group
      description: |
        Disables a specific group that is identifier by the group ID.
      tags:
        - Groups
      parameters:
        - $ref: "#/components/parameters/GroupId"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: ''
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Group updated.
        '400':
          description: Failed due to malformed query parameters.
        '401':
          description: Missing or invalid access token provided.
        '404':
          description: A non-existent entity request.
        '422':
          description: Database can't process request.
        '500':
          $ref: "#/components/responses/ServiceError"
  /groups/{groupId}/members:
    get:
      summary: Get group members.
      description: |
        Gets members associated with the groupd specified by id.
      tags:
        - Groups
      parameters:
        - $ref: "#/components/parameters/GroupId"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Metadata"
        - $ref: "#/components/parameters/Status"
        - $ref: "#/components/parameters/ClientName"
        - $ref: "#/components/parameters/ClientOwner"
        - $ref: "#/components/parameters/ClientIdentifier"
        - $ref: "#/components/parameters/Tags"
      security:
        - bearerAuth: []
      responses:
        '200':
          $ref: "#/components/responses/MembersPageRes"
        '400':
          description: Failed due to malformed query parameters.
        '401':
          description: Missing or invalid access token provided.
        '404':
          description: Group does not exist.
        '500':
          $ref: "#/components/responses/ServiceError"
  /policies:
    post:
      tags:
        - Policies
      summary: Creates new policy
      description: |
        Creates new policies. Only admin can use this endpoint. Therefore, you need an authentication token for the admin.
        Also, only policies defined on the system are allowed to add. For more details, please see the docs for Authorization.
      requestBody:
        $ref: "#/components/requestBodies/PolicyCreateReq"
      security:
        - bearerAuth: []
      responses:
        '201':
          $ref: "#/components/responses/PolicyCreateRes"
        '400':
          description: Failed due to malformed JSON.
        '401':
          description: Missing or invalid access token provided.
        '403':
          description: Unauthorized access token provided.
        '409':
          description: Failed due to using an existing identity.
        '415':
          description: Missing or invalid content type.
        '500':
          $ref: "#/components/responses/ServiceError"

    put:
      summary: Updates policy data.
      description: |
        Updates Actions of a policy.
      tags:
        - Policies
      parameters:
        - $ref: "#/components/parameters/Subject"
        - $ref: "#/components/parameters/Object"
        - $ref: "#/components/parameters/Actions"
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/PolicyUpdateReq"
      responses:
        '200':
          description: Group updated.
        '400':
          description: Failed due to malformed query parameters.
        '401':
          description: Missing or invalid access token provided.
        '404':
          description: Group does not exist.
        '500':
          $ref: "#/components/responses/ServiceError"
  /policies/{obj}/{sub}:
    delete:
      tags:
        - Policies
      summary: Delete policy
      description: |
        Delete specified policies
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/Obj"
        - $ref: "#/components/parameters/Sub"
      responses:
        '200':
          $ref: "#/components/responses/PolicyPageRes"
        '400':
          description: Failed due to malformed query parameters.
        '401':
          description: Missing or invalid access token provided.
        '404':
          description: Policy does not exist.
        '500':
          $ref: "#/components/responses/ServiceError"

  /health:
    get:
      summary: Retrieves service health check info.
      tags:
        - health
      responses:
        '200':
          $ref: "#/components/responses/HealthRes"
        '500':
          $ref: "#/components/responses/ServiceError"

components:
  schemas:
    ClientReqObj:
      type: object
      properties:
        name:
          type: string
          example: clientName
          description: Client name.
        tags:
          type: array
          minItems: 0
          items:
            type: string
          example: ['computations', 'datasets']
          description: Client tags.
        credentials:
          type: object
          properties:
            identity:
              type: string
              example: "clientName@example.com"
              description: Client's identity for example email address will be used as its unique identifier
            secret:
              type: string
              format: password
              example: password
              minimum: 8
              description: Free-form account secret used for acquiring auth token(s).
        owner:
          type: string
          format: uuid
          example: bb7edb32-2eac-4aad-aebe-ed96fe073879
          description: Client owner must be exsiting in the databse.
        metadata:
          type: object
          example: {"domain": "example.com"}
          description: Arbitrary, object-encoded client's data.
        status:
          type: integer
          description: Client Status
          format: int16
          example: 1
      required:
        - credentials

    GroupReqObj:
      type: object
      properties:
        name:
          type: string
          example: groupName
          description: Free-form group name. Group name is unique on the given hierarchy level.
        description:
          type: string
          example: long group description
          description: Group description, free form text.
        parentId:
          type: string
          example: bb7edb32-2eac-4aad-aebe-ed96fe073879
          description: Id of parent group, it must be existing group.
        metadata:
          type: object
          example: {"domain": "example.com"}
          description: Arbitrary, object-encoded groups's data.
      required:
        - name
    PolicyReqObj:
      type: object
      properties:
        subject:
          type: string
          description: Policy subject refers to the client id
          example: 'bb7edb32-2eac-4aad-aebe-ed96fe073879'
        object:
          type: string
          description: Policy object refers to either the client id, group id, computation id or dataset id
          example: 'bb7edb32-2eac-4aad-aebe-ed96fe073879'
        actions:
          type: array
          minItems: 0
          items:
            type: string
          example: ['m_write', 'g_add']
          description: Policy actions.
      required:
        - subject
        - object
        - actions
    Client:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: bb7edb32-2eac-4aad-aebe-ed96fe073879
          description: Client unique identifier.
        name:
          type: string
          example: clientName
          description: Client name.
        tags:
          type: array
          minItems: 0
          items:
            type: string
          example: ['computations', 'datasets']
          description: Client tags.
        owner:
          type: string
          format: uuid
          example: bb7edb32-2eac-4aad-aebe-ed96fe073879
          description: Client owner identifier.
        credentials:
          type: object
          properties:
            identity:
              type: string
              example: client@mainflux.com
              description: Client Identity for example email address.
            secret:
              type: string
              example: password
              description: Client secret password.
        metadata:
          type: object
          example: {"role": "general"}
          description: Arbitrary, object-encoded client's data.
        status:
          type: integer
          description: Client Status
          format: int32
          example: 1
        created_at:
          type: string
          format: date-time
          example: "2019-11-26 13:31:52"
          description: Time when the group was created.
        updated_at:
          type: string
          format: date-time
          example: "2019-11-26 13:31:52"
          description: Time when the group was created.
      xml:
        name: client

    Group:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: bb7edb32-2eac-4aad-aebe-ed96fe073879
          description: Unique group identifier generated by the service.
        name:
          type: string
          example: groupName
          description: Free-form group name. Group name is unique on the given hierarchy level.
        owner_id:
          type: string
          format: uuid
          example: bb7edb32-2eac-4aad-aebe-ed96fe073879
          description: Group owner identifier of user that created the group..
        parent_id:
          type: string
          format: uuid
          example: bb7edb32-2eac-4aad-aebe-ed96fe073879
          description: Group parent identifier.
        description:
          type: string
          example: long group description
          description: Group description, free form text.
        metadata:
          type: object
          example: {"role": "general"}
          description: Arbitrary, object-encoded groups's data.
        path:
          type: string
          example: bb7edb32-2eac-4aad-aebe-ed96fe073879.bb7edb32-2eac-4aad-aebe-ed96fe073879
          description: Hierarchy path, concatenated ids of group ancestors.
        level:
          type: integer
          description: Level in hierarchy, distance from the root group.
          format: int32
          example: 2
          maximum: 5
        created_at:
          type: string
          format: date-time
          example: "2019-11-26 13:31:52"
          description: Datetime when the group was created.
        updated_at:
          type: string
          format: date-time
          example: "2019-11-26 13:31:52"
          description: Datetime when the group was created.
      xml:
        name: group

    Memberships:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: bb7edb32-2eac-4aad-aebe-ed96fe073879
          description: Unique group identifier generated by the service.
        name:
          type: string
          example: groupName
          description: Free-form group name. Group name is unique on the given hierarchy level.
        owner_id:
          type: string
          format: uuid
          example: bb7edb32-2eac-4aad-aebe-ed96fe073879
          description: Group owner identifier of user that created the group..
        parent_id:
          type: string
          format: uuid
          example: bb7edb32-2eac-4aad-aebe-ed96fe073879
          description: Group parent identifier.
        description:
          type: string
          example: long group description
          description: Group description, free form text.
        metadata:
          type: object
          example: {"role": "general"}
          description: Arbitrary, object-encoded groups's data.
        path:
          type: string
          example: bb7edb32-2eac-4aad-aebe-ed96fe073879.bb7edb32-2eac-4aad-aebe-ed96fe073879
          description: Hierarchy path, concatenated ids of group ancestors.
        level:
          type: integer
          description: Level in hierarchy, distance from the root group.
          format: int32
          example: 2
        created_at:
          type: string
          format: date-time
          example: "2019-11-26 13:31:52"
          description: Datetime when the group was created.
        updated_at:
          type: string
          format: date-time
          example: "2019-11-26 13:31:52"
          description: Datetime when the group was created.
      xml:
        name: memberships

    Members:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: bb7edb32-2eac-4aad-aebe-ed96fe073879
          description: Client unique identifier.
        name:
          type: string
          example: clientName
          description: Client name.
        tags:
          type: array
          minItems: 0
          items:
            type: string
          example: ['computations', 'datasets']
          description: Client tags.
        owner:
          type: string
          format: uuid
          example: bb7edb32-2eac-4aad-aebe-ed96fe073879
          description: Client owner identifier.
        credentials:
          type: object
          properties:
            identity:
              type: string
              example: client@mainflux.com
              description: Client Identity for example email address.
            secret:
              type: string
              example: password
              description: Client secret password.
        metadata:
          type: object
          example: {"role": "general"}
          description: Arbitrary, object-encoded client's data.
        status:
          type: integer
          description: Client Status
          format: int32
          example: 1
        created_at:
          type: string
          format: date-time
          example: "2019-11-26 13:31:52"
          description: Time when the group was created.
        updated_at:
          type: string
          format: date-time
          example: "2019-11-26 13:31:52"
          description: Time when the group was created.
      xml:
        name: members
    Policy:
      type: object
      properties:
        owner_id:
          type: string
          format: uuid
          example: bb7edb32-2eac-4aad-aebe-ed96fe073879
          description: Policy owner identifier.
        subject:
          type: string
          format: uuid
          example: bb7edb32-2eac-4aad-aebe-ed96fe073879
          description: Policy subject identifier.
        object:
          type: string
          format: uuid
          example: bb7edb32-2eac-4aad-aebe-ed96fe073879
          description: Policy object identifier.
        actions:
          type: array
          minItems: 0
          items:
            type: string
          example: ['m_write', 'g_add']
          description: Policy actions.
        created_at:
          type: string
          format: date-time
          example: "2019-11-26 13:31:52"
          description: Time when the policy was created.
        updated_at:
          type: string
          format: date-time
          example: "2019-11-26 13:31:52"
          description: Time when the policy was updated.
      xml:
        name: policy
    ClientsPage:
      type: object
      properties:
        clients:
          type: array
          minItems: 0
          uniqueItems: true
          items:
            $ref: "#/components/schemas/Client"
        total:
          type: integer
          description: Total number of items.
        offset:
          type: integer
          description: Number of items to skip during retrieval.
        limit:
          type: integer
          description: Maximum number of items to return in one page.
      required:
        - clients
        - total
        - offset

    GroupsPage:
      type: object
      properties:
        groups:
          type: array
          minItems: 0
          uniqueItems: true
          items:
            $ref: "#/components/schemas/Group"
        total:
          type: integer
          description: Total number of items.
        offset:
          type: integer
          description: Number of items to skip during retrieval.
        limit:
          type: integer
          description: Maximum number of items to return in one page.
      required:
        - groups
        - total
        - level

    MembershipsPage:
      type: object
      properties:
        memberships:
          type: array
          minItems: 0
          uniqueItems: true
          items:
            $ref: "#/components/schemas/Memberships"
        total:
          type: integer
          description: Total number of items.
        offset:
          type: integer
          description: Number of items to skip during retrieval.
        limit:
          type: integer
          description: Maximum number of items to return in one page.
      required:
        - memberships
        - total
        - level

    MembersPage:
      type: object
      properties:
        members:
          type: array
          minItems: 0
          uniqueItems: true
          items:
            $ref: "#/components/schemas/Members"
        total:
          type: integer
          description: Total number of items.
        offset:
          type: integer
          description: Number of items to skip during retrieval.
        limit:
          type: integer
          description: Maximum number of items to return in one page.
      required:
        - members
        - total
        - level
    PoliciesPage:
      type: object
      properties:
        policies:
          type: array
          minItems: 0
          uniqueItems: true
          items:
            $ref: "#/components/schemas/Policy"
        total:
          type: integer
          description: Total number of items.
        offset:
          type: integer
          description: Number of items to skip during retrieval.
        limit:
          type: integer
          description: Maximum number of items to return in one page.
      required:
        - policies
        - total
        - offset
    ClientUpdate:
      type: object
      properties:
        name:
          type: string
          example: clientName
          description: Client name.
        metadata:
          type: object
          example: {"role": "general"}
          description: Arbitrary, object-encoded client's data.
      required:
        - name
        - metadata
    ClientTags:
      type: object
      properties:
        tags:
          type: array
          example: ['yello', 'orange']
          description: Client tags.
          minItems: 0
          uniqueItems: true
          items:
            type: string

    ClientIdentity:
      type: object
      properties:
        identity:
          type: string
          example: client@mainflux.com
          description: Client Identity for example email address.
      required:
        - identity

    ClientSecret:
      type: object
      properties:
        old_secret:
          type: string
          example: oldpassword
          description: Old client secret password.
        new_secret:
          type: string
          example: newpassword
          description: New client secret password.
      required:
        - old_secret
        - new_secret

    ClientOwner:
      type: object
      properties:
        owner:
          type: string
          example: client@mainflux.com
          description: Client owner for example email address.
      required:
        - owner

    GroupUpdate:
      type: object
      properties:
        name:
          type: string
          example: groupName
          description: Free-form group name. Group name is unique on the given hierarchy level.
        description:
          type: string
          example: long description but not too long
          description: Group description, free form text.
        metadata:
          type: object
          example: {"role": "general"}
          description: Arbitrary, object-encoded groups's data.
      required:
        - name
        - metadata
        - description
    PolicyUpdate:
      type: object
      properties:
        actions:
          type: array
          example: ['m_write', 'g_add']
          description: Policy actions.
          minItems: 0
          uniqueItems: true
          items:
            type: string

    IssueToken:
      type: object
      properties:
        identity:
          type: string
          example: client@mainflux.com
          description: Client Identity for example email address.
        secret:
          type: string
          example: password
          description: Client secret password.
      required:
        - identity
        - secret

    RefreshToken:
      type: object
      properties:
        refresh_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjU3OTMwNjksImlhdCI6MTY2NTc1NzA2OSwiaXNzIjoibWFpbmZsdXguYXV0aCIsInN1YiI6ImFkbWluQGV4YW1wbGUuY29tIiwiaXNzdWVyX2lkIjoiZmRjZWVhNWYtNjYxNy00MjY1LWJhZDUtMzYxOTNhOTQ0NjMwIiwidHlwZSI6MH0.3gNd_x01QEiZfQxuQoEyqCqTrcxRkXHO7A4iG_gzu3c
          description: Client refresh token.
      required:
        - refresh_token

    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
      example: {"error": "malformed entity specification"}

    HealthRes:
      type: object
      properties:
        status:
          type: string
          description: Service status.
          enum:
            - pass
        version:
          type: string
          description: Service version.
          example: 0.0.1
        commit:
          type: string
          description: Service commit hash.
          example: 7d6f4dc4f7f0c1fa3dc24eddfb18bb5073ff4f62
        description:
          type: string
          description: Service description.
          example: <service_name> service
        build_time:
          type: string
          description: Service build time.
          example: 1970-01-01_00:00:00
  parameters:
      Referer:
        name: Referer
        description: Host being sent by browser.
        in: header
        schema:
          type: string
        required: true
      ClientId:
        name: clientId
        description: Unique client identifier.
        in: path
        schema:
          type: string
          format: uuid
        required: true
        example: bb7edb32-2eac-4aad-aebe-ed96fe073879
      
      Visibility:
        name: visibility
        description: The visibility specifier when listing clients. Either all, shared or mine.
        in: path
        schema:
          type: string
        required: true
        example: all

      ClientName:
        name: name
        description: Client's name.
        in: query
        schema:
          type: string
        required: false
        example: 'clientName'
      ClientIdentifier:
        name: identifier
        description: Client's identifier.
        in: query
        schema:
          type: string
        required: false
        example: 'clientIdentifier'
      ClientOwner:
        name: owner
        description: Unique owner identifier for a client.
        in: query
        schema:
          type: string
          format: uuid
        required: false
        example: bb7edb32-2eac-4aad-aebe-ed96fe073879

      ClientSharedBy:
        name: shared id
        description: Unique identifier for a client to see other clients that are connected to it.
        in: query
        schema:
          type: string
          format: uuid
        required: false
        example: bb7edb32-2eac-4aad-aebe-ed96fe073879

      ClientVisibility:
        name: visibility
        description: visibility to list either clients I own or clients that are shared with me or both clients I own and shared with me
        in: query
        schema:
          type: string
        required: false
        example: shared
        
      Status:
        name: status
        description: Client account status.
        in: query
        schema:
          type: integer
          default: 0
        required: false
        example: '1'

      Tags:
        name: tags
        description: Client tags.
        in: query
        schema:
          type: array
          minItems: 0
          uniqueItems: true
          items:
            type: string
        required: false
        example: ['yello', 'orange']
      GroupName:
        name: name
        description: Group's name.
        in: query
        schema:
          type: string
        required: false
        example: 'groupName'

      GroupDescription:
        name: name
        description: Group's description.
        in: query
        schema:
          type: string
        required: false
        example: 'group description'

      GroupId:
        name: groupId
        description: Unique group identifier.
        in: path
        schema:
          type: string
          format: uuid
        required: true
        example: bb7edb32-2eac-4aad-aebe-ed96fe073879
      ParentId:
        name: parentId
        description: Unique parent identifier for a group.
        in: query
        schema:
          type: string
          format: uuid
        required: false
        example: bb7edb32-2eac-4aad-aebe-ed96fe073879
      Level:
        name: level
        description: Level of hierarchy up to which to retrieve groups from given group id.
        in: query
        schema:
          type: integer
          minimum: 1
          maximum: 5
        required: false

      Tree:
        name: tree
        description: Specify type of response, JSON array or tree.
        in: query
        required: false
        schema:
          type: boolean
          default: false


      OwnerId:
        name: ownerId
        description: Unique owner identifier for a group.
        in: query
        schema:
          type: string
          format: uuid
        required: false
        example: bb7edb32-2eac-4aad-aebe-ed96fe073879
      Subject:
        name: subject
        description: Unique subject identifier for a policy.
        in: query
        schema:
          type: string
          format: uuid
        required: false
        example: bb7edb32-2eac-4aad-aebe-ed96fe073879


      Object:
        name: object
        description: Unique object identifier for a policy.
        in: query
        schema:
          type: string
          format: uuid
        required: false
        example: bb7edb32-2eac-4aad-aebe-ed96fe073879

      Actions:
        name: actions
        description: Policy action types.
        in: query
        schema:
          type: array
          minItems: 0
          uniqueItems: true
          items:
            type: string
        required: false
        example: ['m_write', 'g_add']
      Sub:
        name: sub
        description: Unique subject identifier for a policy.
        in: path
        schema:
          type: string
          format: uuid
        required: true
        example: bb7edb32-2eac-4aad-aebe-ed96fe073879
      Obj:
        name: obj
        description: Unique object identifier for a policy.
        in: path
        schema:
          type: string
          format: uuid
        required: true
        example: bb7edb32-2eac-4aad-aebe-ed96fe073879
      Metadata:
        name: metadata
        description: Metadata filter. Filtering is performed matching the parameter with metadata on top level. Parameter is json.
        in: query
        schema:
          type: string
          minimum: 0
        required: false
      Limit:
        name: limit
        description: Size of the subset to retrieve.
        in: query
        schema:
          type: integer
          default: 10
          maximum: 100
          minimum: 1
        required: false
        example: '100'

      Offset:
        name: offset
        description: Number of items to skip during retrieval.
        in: query
        schema:
          type: integer
          default: 0
          minimum: 0
        required: false
        example: '0'




  requestBodies:
    ClientCreateReq:
      description: JSON-formatted document describing the new client to be registered
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ClientReqObj'
    ClientUpdateReq:
      description: JSON-formated document describing the metadata and name of client to be update
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ClientUpdate"
    ClientUpdateTagsReq:
      description: JSON-formated document describing the tags of client to be update
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ClientTags"
    ClientUpdateIdentityReq:
      description: Identity change data. Client can change its identity.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ClientIdentity'

    ClientUpdateSecretReq:
      description: Secret change data. Client can change its secret.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ClientSecret'

    ClientUpdateOwnerReq:
      description: JSON-formated document describing the owner of client to be update
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ClientOwner"

    GroupCreateReq:
      description: JSON-formatted document describing the new group to be registered
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GroupReqObj'
    GroupUpdateReq:
      description: JSON-formated document describing the metadata and name of group to be update
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GroupUpdate"
    PolicyCreateReq:
      description: JSON-formatted document describing the new group to be registered
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PolicyReqObj'
    PolicyUpdateReq:
      description: JSON-formated document describing the actions of a policy to be update
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PolicyUpdate"

    IssueTokenReq:
      description: JSON-formated document describing the client identity and secret to be used for issuing token
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              access_token:
                type: string
                example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjU3OTMwNjksImlhdCI6MTY2NTc1NzA2OSwiaXNzIjoibWFpbmZsdXguYXV0aCIsInN1YiI6ImFkbWluQGV4YW1wbGUuY29tIiwiaXNzdWVyX2lkIjoiZmRjZWVhNWYtNjYxNy00MjY1LWJhZDUtMzYxOTNhOTQ0NjMwIiwidHlwZSI6MH0.3gNd_x01QEiZfQxuQoEyqCqTrcxRkXHO7A4iG_gzu3c
                description: Client access token.
              refresh_token:
                type: string
                example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjU3OTMwNjksImlhdCI6MTY2NTc1NzA2OSwiaXNzIjoibWFpbmZsdXguYXV0aCIsInN1YiI6ImFkbWluQGV4YW1wbGUuY29tIiwiaXNzdWVyX2lkIjoiZmRjZWVhNWYtNjYxNy00MjY1LWJhZDUtMzYxOTNhOTQ0NjMwIiwidHlwZSI6MH0.3gNd_x01QEiZfQxuQoEyqCqTrcxRkXHO7A4iG_gzu3c
                description: Client refresh token.
              access_type:
                type: string
                example: access
                description: Client access token type.
              expiry:
                type: string
                example:  "2019-11-26 13:31:52"
                description: Access token expiry.

    RefreshTokenReq:
      description: JSON-formated document describing the client refresh token used for issuing another token
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              access_token:
                type: string
                example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjU3OTMwNjksImlhdCI6MTY2NTc1NzA2OSwiaXNzIjoibWFpbmZsdXguYXV0aCIsInN1YiI6ImFkbWluQGV4YW1wbGUuY29tIiwiaXNzdWVyX2lkIjoiZmRjZWVhNWYtNjYxNy00MjY1LWJhZDUtMzYxOTNhOTQ0NjMwIiwidHlwZSI6MH0.3gNd_x01QEiZfQxuQoEyqCqTrcxRkXHO7A4iG_gzu3c
                description: Client access token.
              refresh_token:
                type: string
                example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NjU3OTMwNjksImlhdCI6MTY2NTc1NzA2OSwiaXNzIjoibWFpbmZsdXguYXV0aCIsInN1YiI6ImFkbWluQGV4YW1wbGUuY29tIiwiaXNzdWVyX2lkIjoiZmRjZWVhNWYtNjYxNy00MjY1LWJhZDUtMzYxOTNhOTQ0NjMwIiwidHlwZSI6MH0.3gNd_x01QEiZfQxuQoEyqCqTrcxRkXHO7A4iG_gzu3c
                description: Client refresh token.
              access_type:
                type: string
                example: access
                description: Client access token type.
              expiry:
                type: string
                example:  "2019-11-26 13:31:52"
                description: Access token expiry.

  responses:
    ClientCreateRes:
      description: Registered new client.
      headers:
        Location:
          content:
            text/plain:
              schema:
                type: string
                format: url
                description: Registered client relative URL.
                example: /clients/{clientId}
    ClientRes:
      description: Data retrieved.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Client"
    ClientPageRes:
      description: Data retrieved.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ClientsPage"

    MembershipsPageRes:
      description: Memberships associated with the client.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/MembershipsPage"
    GroupCreateRes:
      description: Registered new group.
      headers:
        Location:
          content:
            text/plain:
              schema:
                type: string
                format: url
                description: Registered group relative URL.
                example: /clients/{groupId}
    GroupRes:
      description: Data retrieved.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Group"
    GroupPageRes:
      description: Data retrieved.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GroupsPage"

    MembersPageRes:
      description: Group members retrieved.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/MembersPage"
    PolicyCreateRes:
      description: Registered new policy.
      headers:
        Location:
          content:
            text/plain:
              schema:
                type: string
                format: url
                description: Registered policy relative URL.
                example: /policy/{subject}/{object}
    PolicyRes:
      description: Data retrieved.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Policy"
    PolicyPageRes:
      description: Data retrieved.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PoliciesPage"

    IssueTokenRes:
      description: Data retrieved.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/IssueToken"
    RefreshTokenRes:
      description: Data retrieved.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RefreshToken"
    HealthRes:
      description: Service Health Check.
      content:
        application/health+json:
          schema:
            $ref: "#/components/schemas/HealthRes"
    ServiceError:
      description: Unexpected server-side error occurred.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        * Client access: "Authorization: Bearer <client_token>"

security:
  - bearerAuth: []
