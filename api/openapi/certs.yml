openapi: 3.0.1
info:
  title: Mainflux Certs service
  description: HTTP API for Certs service
  version: "1.0.0"

paths:
  /certs:
    post:
      operationId: createCert
      summary: Creates a certificate for thing
      description: Creates a certificate for thing
      tags:
        - certs
      requestBody:
        $ref: "#/components/requestBodies/CertReq"
      responses:
        '201':
          $ref: "#/components/responses/CertRes"
        '404':
          description: Not Found
          $ref: "#/components/responses/Error"
        '400':
          description: Failed due to malformed JSON.
          $ref: "#/components/responses/Error"
        "401":
          description: Missing or invalid access token provided.
          $ref: "#/components/responses/Error"
        '500':
          description: Unexpected server-side error ocurred.
          $ref: "#/components/responses/ServiceError"
    get:
      operationId: getCerts
      summary: Get the requested certificates
      description: Get the requested certificates
      tags:
        - certs
      parameters:
        - $ref: "#/components/parameters/ThingID"
        - $ref: "#/components/parameters/Name"
        - $ref: "#/components/parameters/Serial"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Offset"
      responses:
        '201':
          $ref: "#/components/responses/CertRes"
        '400':
          description: Failed due to malformed query parameters.
          $ref: "#/components/responses/Error"
        "401":
          description: Missing or invalid access token provided.
          $ref: "#/components/responses/Error"
        '404':
          description: Failed to retrieve corresponding certificates.
          $ref: "#/components/responses/Error"
        '500':
          $ref: "#/components/responses/ServiceError"

  /certs/{cert_id}:
    get:
      operationId: getCert
      summary: Retrieves a certificate
      description: |
        Retrieves a certificate for a given cert ID.
      tags:
        - certs
      parameters:
        - $ref: "#/components/parameters/CertID"
      responses:
        '200':
          $ref: "#/components/responses/CertRes"
        '400':
          description: Failed due to malformed query parameters.
        "401":
          description: Missing or invalid access token provided.
        '404':
          description: |
            Failed to retrieve corresponding certificate.
        '500':
          $ref: "#/components/responses/ServiceError"
    delete:
      operationId: deleteCert
      summary: Delete a certificate
      description: |
        Delete a certificate for a given cert ID.
      tags:
        - certs
      parameters:
        - $ref: "#/components/parameters/CertID"
      responses:
        '200':
          description: Certificate deleted successfully.
        "401":
          description: Missing or invalid access token provided.
        '404':
          description: |
            Failed to revoke corresponding certificate.
        '500':
          $ref: "#/components/responses/ServiceError"

  /certs/{cert_id}/revoke:
    post:
      operationId: revokeCert
      summary: Revoke a certificate
      description: |
        Revoke a certificate for a given cert ID.
      tags:
        - certs
      parameters:
        - $ref: "#/components/parameters/CertID"
      responses:
        '200':
          description: Certificate revoked successfully.
        '400':
          description: Failed due to malformed query parameters.
        "401":
          description: Missing or invalid access token provided.
        '404':
          description: Corresponding certificate not found.
        '500':
          $ref: "#/components/responses/ServiceError"

  /certs/{cert_id}/renew:
    post:
      operationId: renewCert
      summary: Renew a certificate
      description: |
        Renew a certificate for a given cert ID.
      tags:
        - certs
      parameters:
        - $ref: "#/components/parameters/CertID"
      responses:
        '200':
          $ref: "#/components/responses/CertRes"
        '400':
          description: Failed due to malformed query parameters.
        "401":
          description: Missing or invalid access token provided.
        '404':
          description: Corresponding certificate not found.
        '500':
          $ref: "#/components/responses/ServiceError"

  /things/{thing_id}/revoke:
    post:
      operationId: revokeThingCerts
      summary: Revoke certificates' of thing ID
      description: |
        Revoke a list of certificates' for a given thing ID.
      tags:
        - certs
      parameters:
        - $ref: "#/components/parameters/ThingIDPath"
        - $ref: "#/components/parameters/Limit"
      responses:
        '200':
          description: All the certificate belongs to thing_id with specified limit are revoked successfully.
        '400':
          description: Failed due to malformed query parameters.
          $ref: "#/components/responses/Error"
        "401":
          description: Missing or invalid access token provided.
          $ref: "#/components/responses/Error"
        '404':
          description: Failed to retrieve corresponding certificates.
          $ref: "#/components/responses/Error"
        '500':
          $ref: "#/components/responses/ServiceError"


  /things/{thing_id}/renew:
    post:
      operationId: renewThingCerts
      summary: Renews certificates' of thing ID
      description: |
        Renews a list of certificates' for a given thing ID.
      tags:
        - certs
      parameters:
        - $ref: "#/components/parameters/ThingIDPath"
        - $ref: "#/components/parameters/Limit"
      responses:
        '200':
          description: All the certificate belongs to thing_id with specified limit are renewed successfully.
        '400':
          description: Failed due to malformed query parameters.
          $ref: "#/components/responses/Error"
        "401":
          description: Missing or invalid access token provided.
          $ref: "#/components/responses/Error"
        '404':
          description: Failed to retrieve corresponding certificates.
          $ref: "#/components/responses/Error"
        '500':
          $ref: "#/components/responses/ServiceError"

  /things/{thing_id}:
    delete:
      operationId: deleteThingCerts
      summary: Delete certificates' of a thing ID
      description: |
        Delete a list of certificates' for a given thing ID.
      tags:
        - certs
      parameters:
        - $ref: "#/components/parameters/ThingIDPath"
        - $ref: "#/components/parameters/Limit"
      responses:
        '200':
          description: All the certificate belongs to thing_id with specified limit are delete successfully.
        '400':
          description: Failed due to malformed query parameters.
          $ref: "#/components/responses/Error"
        "401":
          description: Missing or invalid access token provided.
          $ref: "#/components/responses/Error"
        '404':
          description: Failed to retrieve corresponding certificates.
          $ref: "#/components/responses/Error"
        '500':
          $ref: "#/components/responses/ServiceError"





  /health:
    get:
      summary: Retrieves service health check info.
      tags:
        - health
      responses:
        '200':
          $ref: "#/components/responses/HealthRes"
        '500':
          $ref: "#/components/responses/ServiceError"


components:
  parameters:
    CertID:
      name: cert_id
      description: Unique certificate identifier.
      in: path
      schema:
        type: string
        format: uuid
      required: true

    ThingIDPath:
      name: thing_id
      description:  Unique thing identifier.
      in: path
      schema:
        type: string
        format: uuid
      required: true

    ThingID:
      name: thing_id
      description:  Unique thing identifier.
      in: query
      schema:
        type: string
        format: uuid
      required: false
    Serial:
      name: serial
      description: Unique certificate identifier provided by PKI.
      in: query
      schema:
        type: string
      required: false
    Name:
      name: name
      description: Name filter. Filtering is performed as a case-insensitive partial match.
      in: query
      schema:
        type: string
        format: ulid
      required: false
    Limit:
      name: limit
      description: Size of the subset to retrieve.
      in: query
      schema:
        type: integer
        default: 10
        maximum: 100
        minimum: 1
      required: false
    Offset:
      name: offset
      description: Number of items to skip during retrieval.
      in: query
      schema:
        type: integer
        default: 0
        minimum: 0
      required: false

  schemas:
    Err:
      type: object
      properties:
        error:
          type: string
          description: contains details of the error
    Cert:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Identification UUID of the certificate
        name:
          type: string
          format: uuid
          description: Name of the certificate.
        owner_id:
          type: string
          format: uuid
          description: ID of the corresponding Mainflux Thing owner.
        thing_id:
          type: string
          format: uuid
          description: Corresponding Mainflux Thing ID.
        serial:
          type: string
          description: Certificate serial
        certificate:
          type: string
          description: Certificate.
        private_key:
          type: string
          description: Key for the Certificate.
        ca_chain:
          type: string
          description: CA Chain contains root CA certificate and all the intermediate CA certificates.
        issuing_ca:
          type: string
          description: CA Certificate that is used to issue client certs, usually intermediate.
        ttl:
          type: string
          description: Certificate validity duration.
        expire:
          type: string
          format: timestamp
          description: Certificate expiry timestamp
        revocation:
          type: string
          format: timestamp
          description: Certificate revoked timestamp

    CertsPage:
      type: object
      properties:
        certs:
          type: array
          minItems: 0
          uniqueItems: true
          items:
            $ref: "#/components/schemas/Cert"
        total:
          type: integer
          description: Total number of items.
        offset:
          type: integer
          description: Number of items to skip during retrieval.
        limit:
          type: integer
          description: Maximum number of items to return in one page.
    RemainingCount:
      type: object
      properties:
        remaining:
          type: string
          description: remaining certificate left after the operation.

  requestBodies:
    CertReq:
      description: |
          Issues a certificate that is required for mTLS. To create a certificate for a thing
          provide a thing id, data identifying particular thing will be embedded into the Certificate.
          x509 and ECC certificates are supported when using when Vault is used as PKI.
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - thing_id
              - ttl
            properties:
               name:
                 type: string
                 example: thing_1_cert_001
                 description: Name of the certificate, A thing can have multiple certificate
               thing_id:
                 type: string
                 format: uuid
                 description: ID of the thing for which certificate is required
               ttl:
                 type: string
                 example: "10h"
                 description: Certificate validity

  responses:
    Error:
      description: Invalid request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Err"
    ServiceError:
      description: Unexpected server-side error occurred.
    CertRes:
      description: Certificate data.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Cert"
    CertsPageRes:
      description: Certificates page.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CertsPage"
    HealthRes:
      description: Service Health Check.
      content:
        application/json:
          schema:
            $ref: "./schemas/HealthInfo.yml"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        * Users access: "Authorization: Bearer <user_token>"

security:
  - bearerAuth: []
