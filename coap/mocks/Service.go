// Code generated by mockery v2.42.1. DO NOT EDIT.

// Copyright (c) Abstract Machines

package mocks

import (
	context "context"

	coap "github.com/absmach/magistrala/coap"

	messaging "github.com/absmach/magistrala/pkg/messaging"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Publish provides a mock function with given fields: ctx, key, msg
func (_m *Service) Publish(ctx context.Context, key string, msg *messaging.Message) error {
	ret := _m.Called(ctx, key, msg)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *messaging.Message) error); ok {
		r0 = rf(ctx, key, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Subscribe provides a mock function with given fields: ctx, key, chanID, subtopic, c
func (_m *Service) Subscribe(ctx context.Context, key string, chanID string, subtopic string, c coap.Client) error {
	ret := _m.Called(ctx, key, chanID, subtopic, c)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, coap.Client) error); ok {
		r0 = rf(ctx, key, chanID, subtopic, c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Unsubscribe provides a mock function with given fields: ctx, key, chanID, subptopic, token
func (_m *Service) Unsubscribe(ctx context.Context, key string, chanID string, subptopic string, token string) error {
	ret := _m.Called(ctx, key, chanID, subptopic, token)

	if len(ret) == 0 {
		panic("no return value specified for Unsubscribe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = rf(ctx, key, chanID, subptopic, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
