// Code generated by mockery v2.43.2. DO NOT EDIT.

// Copyright (c) Abstract Machines

package mocks

import (
	context "context"

	authn "github.com/absmach/magistrala/pkg/authn"

	mock "github.com/stretchr/testify/mock"

	policies "github.com/absmach/magistrala/pkg/policies"

	roles "github.com/absmach/magistrala/pkg/roles"
)

// Provisioner is an autogenerated mock type for the Provisioner type
type Provisioner struct {
	mock.Mock
}

// AddNewEntityRoles provides a mock function with given fields: ctx, session, entityID, optionalEntityPolicies, newBuiltInRoleMembers
func (_m *Provisioner) AddNewEntityRoles(ctx context.Context, session authn.Session, entityID string, optionalEntityPolicies []policies.Policy, newBuiltInRoleMembers map[roles.BuiltInRoleName][]roles.Member) ([]roles.RoleProvision, error) {
	ret := _m.Called(ctx, session, entityID, optionalEntityPolicies, newBuiltInRoleMembers)

	if len(ret) == 0 {
		panic("no return value specified for AddNewEntityRoles")
	}

	var r0 []roles.RoleProvision
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, authn.Session, string, []policies.Policy, map[roles.BuiltInRoleName][]roles.Member) ([]roles.RoleProvision, error)); ok {
		return rf(ctx, session, entityID, optionalEntityPolicies, newBuiltInRoleMembers)
	}
	if rf, ok := ret.Get(0).(func(context.Context, authn.Session, string, []policies.Policy, map[roles.BuiltInRoleName][]roles.Member) []roles.RoleProvision); ok {
		r0 = rf(ctx, session, entityID, optionalEntityPolicies, newBuiltInRoleMembers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]roles.RoleProvision)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, authn.Session, string, []policies.Policy, map[roles.BuiltInRoleName][]roles.Member) error); ok {
		r1 = rf(ctx, session, entityID, optionalEntityPolicies, newBuiltInRoleMembers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveEntityRoles provides a mock function with given fields: ctx, session, entityID, optionalEntityPolicies
func (_m *Provisioner) RemoveEntityRoles(ctx context.Context, session authn.Session, entityID string, optionalEntityPolicies []policies.Policy) error {
	ret := _m.Called(ctx, session, entityID, optionalEntityPolicies)

	if len(ret) == 0 {
		panic("no return value specified for RemoveEntityRoles")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, authn.Session, string, []policies.Policy) error); ok {
		r0 = rf(ctx, session, entityID, optionalEntityPolicies)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewProvisioner creates a new instance of Provisioner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProvisioner(t interface {
	mock.TestingT
	Cleanup(func())
}) *Provisioner {
	mock := &Provisioner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
