// Code generated by mockery v2.43.2. DO NOT EDIT.

// Copyright (c) Abstract Machines

package mocks

import (
	context "context"

	roles "github.com/absmach/magistrala/pkg/roles"
	mock "github.com/stretchr/testify/mock"
)

// Roles is an autogenerated mock type for the Roles type
type Roles struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, entityID, roleName, optionalOperations, optionalMembers
func (_m *Roles) Add(ctx context.Context, entityID string, roleName string, optionalOperations []roles.Operation, optionalMembers []string) (roles.Role, error) {
	ret := _m.Called(ctx, entityID, roleName, optionalOperations, optionalMembers)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 roles.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []roles.Operation, []string) (roles.Role, error)); ok {
		return rf(ctx, entityID, roleName, optionalOperations, optionalMembers)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []roles.Operation, []string) roles.Role); ok {
		r0 = rf(ctx, entityID, roleName, optionalOperations, optionalMembers)
	} else {
		r0 = ret.Get(0).(roles.Role)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, []roles.Operation, []string) error); ok {
		r1 = rf(ctx, entityID, roleName, optionalOperations, optionalMembers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddMembers provides a mock function with given fields: ctx, entityID, roleName, members
func (_m *Roles) AddMembers(ctx context.Context, entityID string, roleName string, members []string) ([]string, error) {
	ret := _m.Called(ctx, entityID, roleName, members)

	if len(ret) == 0 {
		panic("no return value specified for AddMembers")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string) ([]string, error)); ok {
		return rf(ctx, entityID, roleName, members)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string) []string); ok {
		r0 = rf(ctx, entityID, roleName, members)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, []string) error); ok {
		r1 = rf(ctx, entityID, roleName, members)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddNewEntityRoles provides a mock function with given fields: ctx, entityID, newEntityDefaultRoles, optionalPolicies
func (_m *Roles) AddNewEntityRoles(ctx context.Context, entityID string, newEntityDefaultRoles map[string][]string, optionalPolicies []roles.OptionalPolicy) ([]roles.Role, error) {
	ret := _m.Called(ctx, entityID, newEntityDefaultRoles, optionalPolicies)

	if len(ret) == 0 {
		panic("no return value specified for AddNewEntityRoles")
	}

	var r0 []roles.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string][]string, []roles.OptionalPolicy) ([]roles.Role, error)); ok {
		return rf(ctx, entityID, newEntityDefaultRoles, optionalPolicies)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string][]string, []roles.OptionalPolicy) []roles.Role); ok {
		r0 = rf(ctx, entityID, newEntityDefaultRoles, optionalPolicies)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]roles.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, map[string][]string, []roles.OptionalPolicy) error); ok {
		r1 = rf(ctx, entityID, newEntityDefaultRoles, optionalPolicies)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddOperation provides a mock function with given fields: ctx, entityID, roleName, operations
func (_m *Roles) AddOperation(ctx context.Context, entityID string, roleName string, operations []roles.Operation) ([]roles.Operation, error) {
	ret := _m.Called(ctx, entityID, roleName, operations)

	if len(ret) == 0 {
		panic("no return value specified for AddOperation")
	}

	var r0 []roles.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []roles.Operation) ([]roles.Operation, error)); ok {
		return rf(ctx, entityID, roleName, operations)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []roles.Operation) []roles.Operation); ok {
		r0 = rf(ctx, entityID, roleName, operations)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]roles.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, []roles.Operation) error); ok {
		r1 = rf(ctx, entityID, roleName, operations)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckMembersExists provides a mock function with given fields: ctx, entityID, roleName, members
func (_m *Roles) CheckMembersExists(ctx context.Context, entityID string, roleName string, members []string) (bool, error) {
	ret := _m.Called(ctx, entityID, roleName, members)

	if len(ret) == 0 {
		panic("no return value specified for CheckMembersExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string) (bool, error)); ok {
		return rf(ctx, entityID, roleName, members)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string) bool); ok {
		r0 = rf(ctx, entityID, roleName, members)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, []string) error); ok {
		r1 = rf(ctx, entityID, roleName, members)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckOperationsExists provides a mock function with given fields: ctx, entityID, roleName, operations
func (_m *Roles) CheckOperationsExists(ctx context.Context, entityID string, roleName string, operations []roles.Operation) (bool, error) {
	ret := _m.Called(ctx, entityID, roleName, operations)

	if len(ret) == 0 {
		panic("no return value specified for CheckOperationsExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []roles.Operation) (bool, error)); ok {
		return rf(ctx, entityID, roleName, operations)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []roles.Operation) bool); ok {
		r0 = rf(ctx, entityID, roleName, operations)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, []roles.Operation) error); ok {
		r1 = rf(ctx, entityID, roleName, operations)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMembers provides a mock function with given fields: ctx, entityID, roleName, limit, offset
func (_m *Roles) ListMembers(ctx context.Context, entityID string, roleName string, limit uint64, offset uint64) (roles.MembersPage, error) {
	ret := _m.Called(ctx, entityID, roleName, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for ListMembers")
	}

	var r0 roles.MembersPage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, uint64, uint64) (roles.MembersPage, error)); ok {
		return rf(ctx, entityID, roleName, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, uint64, uint64) roles.MembersPage); ok {
		r0 = rf(ctx, entityID, roleName, limit, offset)
	} else {
		r0 = ret.Get(0).(roles.MembersPage)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, uint64, uint64) error); ok {
		r1 = rf(ctx, entityID, roleName, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOperations provides a mock function with given fields: ctx, entityID, roleName
func (_m *Roles) ListOperations(ctx context.Context, entityID string, roleName string) ([]roles.Operation, error) {
	ret := _m.Called(ctx, entityID, roleName)

	if len(ret) == 0 {
		panic("no return value specified for ListOperations")
	}

	var r0 []roles.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]roles.Operation, error)); ok {
		return rf(ctx, entityID, roleName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []roles.Operation); ok {
		r0 = rf(ctx, entityID, roleName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]roles.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, entityID, roleName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: ctx, entityID, roleName
func (_m *Roles) Remove(ctx context.Context, entityID string, roleName string) error {
	ret := _m.Called(ctx, entityID, roleName)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, entityID, roleName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveAllMembers provides a mock function with given fields: ctx, entityID, roleName
func (_m *Roles) RemoveAllMembers(ctx context.Context, entityID string, roleName string) error {
	ret := _m.Called(ctx, entityID, roleName)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAllMembers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, entityID, roleName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveAllOperations provides a mock function with given fields: ctx, entityID, roleName
func (_m *Roles) RemoveAllOperations(ctx context.Context, entityID string, roleName string) error {
	ret := _m.Called(ctx, entityID, roleName)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAllOperations")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, entityID, roleName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveMembers provides a mock function with given fields: ctx, entityID, roleName, members
func (_m *Roles) RemoveMembers(ctx context.Context, entityID string, roleName string, members []string) error {
	ret := _m.Called(ctx, entityID, roleName, members)

	if len(ret) == 0 {
		panic("no return value specified for RemoveMembers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string) error); ok {
		r0 = rf(ctx, entityID, roleName, members)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveOperations provides a mock function with given fields: ctx, entityID, roleName, operations
func (_m *Roles) RemoveOperations(ctx context.Context, entityID string, roleName string, operations []roles.Operation) error {
	ret := _m.Called(ctx, entityID, roleName, operations)

	if len(ret) == 0 {
		panic("no return value specified for RemoveOperations")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []roles.Operation) error); ok {
		r0 = rf(ctx, entityID, roleName, operations)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Retrieve provides a mock function with given fields: ctx, entityID, roleName
func (_m *Roles) Retrieve(ctx context.Context, entityID string, roleName string) (roles.Role, error) {
	ret := _m.Called(ctx, entityID, roleName)

	if len(ret) == 0 {
		panic("no return value specified for Retrieve")
	}

	var r0 roles.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (roles.Role, error)); ok {
		return rf(ctx, entityID, roleName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) roles.Role); ok {
		r0 = rf(ctx, entityID, roleName)
	} else {
		r0 = ret.Get(0).(roles.Role)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, entityID, roleName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveAll provides a mock function with given fields: ctx, entityID, limit, offset
func (_m *Roles) RetrieveAll(ctx context.Context, entityID string, limit uint64, offset uint64) (roles.RolePage, error) {
	ret := _m.Called(ctx, entityID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveAll")
	}

	var r0 roles.RolePage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64, uint64) (roles.RolePage, error)); ok {
		return rf(ctx, entityID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64, uint64) roles.RolePage); ok {
		r0 = rf(ctx, entityID, limit, offset)
	} else {
		r0 = ret.Get(0).(roles.RolePage)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, uint64, uint64) error); ok {
		r1 = rf(ctx, entityID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateName provides a mock function with given fields: ctx, entityID, oldRoleName, newRoleName
func (_m *Roles) UpdateName(ctx context.Context, entityID string, oldRoleName string, newRoleName string) (roles.Role, error) {
	ret := _m.Called(ctx, entityID, oldRoleName, newRoleName)

	if len(ret) == 0 {
		panic("no return value specified for UpdateName")
	}

	var r0 roles.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (roles.Role, error)); ok {
		return rf(ctx, entityID, oldRoleName, newRoleName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) roles.Role); ok {
		r0 = rf(ctx, entityID, oldRoleName, newRoleName)
	} else {
		r0 = ret.Get(0).(roles.Role)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, entityID, oldRoleName, newRoleName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRoles creates a new instance of Roles. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRoles(t interface {
	mock.TestingT
	Cleanup(func())
}) *Roles {
	mock := &Roles{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
