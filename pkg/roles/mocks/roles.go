// Code generated by mockery v2.43.2. DO NOT EDIT.

// Copyright (c) Abstract Machines

package mocks

import (
	context "context"

	roles "github.com/absmach/magistrala/pkg/roles"
	mock "github.com/stretchr/testify/mock"
)

// Roles is an autogenerated mock type for the Roles type
type Roles struct {
	mock.Mock
}

// AddRole provides a mock function with given fields: ctx, token, entityID, roleName, optionalCapabilities, optionalMembers
func (_m *Roles) AddRole(ctx context.Context, token string, entityID string, roleName string, optionalCapabilities []string, optionalMembers []string) (roles.Role, error) {
	ret := _m.Called(ctx, token, entityID, roleName, optionalCapabilities, optionalMembers)

	if len(ret) == 0 {
		panic("no return value specified for AddRole")
	}

	var r0 roles.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []string, []string) (roles.Role, error)); ok {
		return rf(ctx, token, entityID, roleName, optionalCapabilities, optionalMembers)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []string, []string) roles.Role); ok {
		r0 = rf(ctx, token, entityID, roleName, optionalCapabilities, optionalMembers)
	} else {
		r0 = ret.Get(0).(roles.Role)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, []string, []string) error); ok {
		r1 = rf(ctx, token, entityID, roleName, optionalCapabilities, optionalMembers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveRole provides a mock function with given fields: ctx, token, entityID, roleName
func (_m *Roles) RemoveRole(ctx context.Context, token string, entityID string, roleName string) error {
	ret := _m.Called(ctx, token, entityID, roleName)

	if len(ret) == 0 {
		panic("no return value specified for RemoveRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, token, entityID, roleName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RetrieveAllRoles provides a mock function with given fields: ctx, token, entityID, limit, offset
func (_m *Roles) RetrieveAllRoles(ctx context.Context, token string, entityID string, limit uint64, offset uint64) (roles.RolePage, error) {
	ret := _m.Called(ctx, token, entityID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveAllRoles")
	}

	var r0 roles.RolePage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, uint64, uint64) (roles.RolePage, error)); ok {
		return rf(ctx, token, entityID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, uint64, uint64) roles.RolePage); ok {
		r0 = rf(ctx, token, entityID, limit, offset)
	} else {
		r0 = ret.Get(0).(roles.RolePage)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, uint64, uint64) error); ok {
		r1 = rf(ctx, token, entityID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveRole provides a mock function with given fields: ctx, token, entityID, roleName
func (_m *Roles) RetrieveRole(ctx context.Context, token string, entityID string, roleName string) (roles.Role, error) {
	ret := _m.Called(ctx, token, entityID, roleName)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveRole")
	}

	var r0 roles.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (roles.Role, error)); ok {
		return rf(ctx, token, entityID, roleName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) roles.Role); ok {
		r0 = rf(ctx, token, entityID, roleName)
	} else {
		r0 = ret.Get(0).(roles.Role)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, token, entityID, roleName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoleAddCapabilities provides a mock function with given fields: ctx, token, entityID, roleName, capabilities
func (_m *Roles) RoleAddCapabilities(ctx context.Context, token string, entityID string, roleName string, capabilities []string) ([]string, error) {
	ret := _m.Called(ctx, token, entityID, roleName, capabilities)

	if len(ret) == 0 {
		panic("no return value specified for RoleAddCapabilities")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []string) ([]string, error)); ok {
		return rf(ctx, token, entityID, roleName, capabilities)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []string) []string); ok {
		r0 = rf(ctx, token, entityID, roleName, capabilities)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, []string) error); ok {
		r1 = rf(ctx, token, entityID, roleName, capabilities)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoleAddMembers provides a mock function with given fields: ctx, token, entityID, roleName, members
func (_m *Roles) RoleAddMembers(ctx context.Context, token string, entityID string, roleName string, members []string) ([]string, error) {
	ret := _m.Called(ctx, token, entityID, roleName, members)

	if len(ret) == 0 {
		panic("no return value specified for RoleAddMembers")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []string) ([]string, error)); ok {
		return rf(ctx, token, entityID, roleName, members)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []string) []string); ok {
		r0 = rf(ctx, token, entityID, roleName, members)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, []string) error); ok {
		r1 = rf(ctx, token, entityID, roleName, members)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoleCheckCapabilitiesExists provides a mock function with given fields: ctx, token, entityID, roleName, capabilities
func (_m *Roles) RoleCheckCapabilitiesExists(ctx context.Context, token string, entityID string, roleName string, capabilities []string) (bool, error) {
	ret := _m.Called(ctx, token, entityID, roleName, capabilities)

	if len(ret) == 0 {
		panic("no return value specified for RoleCheckCapabilitiesExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []string) (bool, error)); ok {
		return rf(ctx, token, entityID, roleName, capabilities)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []string) bool); ok {
		r0 = rf(ctx, token, entityID, roleName, capabilities)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, []string) error); ok {
		r1 = rf(ctx, token, entityID, roleName, capabilities)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoleCheckMembersExists provides a mock function with given fields: ctx, token, entityID, roleName, members
func (_m *Roles) RoleCheckMembersExists(ctx context.Context, token string, entityID string, roleName string, members []string) (bool, error) {
	ret := _m.Called(ctx, token, entityID, roleName, members)

	if len(ret) == 0 {
		panic("no return value specified for RoleCheckMembersExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []string) (bool, error)); ok {
		return rf(ctx, token, entityID, roleName, members)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []string) bool); ok {
		r0 = rf(ctx, token, entityID, roleName, members)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, []string) error); ok {
		r1 = rf(ctx, token, entityID, roleName, members)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoleListCapabilities provides a mock function with given fields: ctx, token, entityID, roleName
func (_m *Roles) RoleListCapabilities(ctx context.Context, token string, entityID string, roleName string) ([]string, error) {
	ret := _m.Called(ctx, token, entityID, roleName)

	if len(ret) == 0 {
		panic("no return value specified for RoleListCapabilities")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) ([]string, error)); ok {
		return rf(ctx, token, entityID, roleName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []string); ok {
		r0 = rf(ctx, token, entityID, roleName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, token, entityID, roleName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoleListMembers provides a mock function with given fields: ctx, token, entityID, roleName, limit, offset
func (_m *Roles) RoleListMembers(ctx context.Context, token string, entityID string, roleName string, limit uint64, offset uint64) (roles.MembersPage, error) {
	ret := _m.Called(ctx, token, entityID, roleName, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for RoleListMembers")
	}

	var r0 roles.MembersPage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, uint64, uint64) (roles.MembersPage, error)); ok {
		return rf(ctx, token, entityID, roleName, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, uint64, uint64) roles.MembersPage); ok {
		r0 = rf(ctx, token, entityID, roleName, limit, offset)
	} else {
		r0 = ret.Get(0).(roles.MembersPage)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, uint64, uint64) error); ok {
		r1 = rf(ctx, token, entityID, roleName, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoleRemoveAllCapabilities provides a mock function with given fields: ctx, token, entityID, roleName
func (_m *Roles) RoleRemoveAllCapabilities(ctx context.Context, token string, entityID string, roleName string) error {
	ret := _m.Called(ctx, token, entityID, roleName)

	if len(ret) == 0 {
		panic("no return value specified for RoleRemoveAllCapabilities")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, token, entityID, roleName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RoleRemoveAllMembers provides a mock function with given fields: ctx, token, entityID, roleName
func (_m *Roles) RoleRemoveAllMembers(ctx context.Context, token string, entityID string, roleName string) error {
	ret := _m.Called(ctx, token, entityID, roleName)

	if len(ret) == 0 {
		panic("no return value specified for RoleRemoveAllMembers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, token, entityID, roleName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RoleRemoveCapabilities provides a mock function with given fields: ctx, token, entityID, roleName, capabilities
func (_m *Roles) RoleRemoveCapabilities(ctx context.Context, token string, entityID string, roleName string, capabilities []string) error {
	ret := _m.Called(ctx, token, entityID, roleName, capabilities)

	if len(ret) == 0 {
		panic("no return value specified for RoleRemoveCapabilities")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []string) error); ok {
		r0 = rf(ctx, token, entityID, roleName, capabilities)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RoleRemoveMembers provides a mock function with given fields: ctx, token, entityID, roleName, members
func (_m *Roles) RoleRemoveMembers(ctx context.Context, token string, entityID string, roleName string, members []string) error {
	ret := _m.Called(ctx, token, entityID, roleName, members)

	if len(ret) == 0 {
		panic("no return value specified for RoleRemoveMembers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []string) error); ok {
		r0 = rf(ctx, token, entityID, roleName, members)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateRoleName provides a mock function with given fields: ctx, token, entityID, oldRoleName, newRoleName
func (_m *Roles) UpdateRoleName(ctx context.Context, token string, entityID string, oldRoleName string, newRoleName string) (roles.Role, error) {
	ret := _m.Called(ctx, token, entityID, oldRoleName, newRoleName)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRoleName")
	}

	var r0 roles.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) (roles.Role, error)); ok {
		return rf(ctx, token, entityID, oldRoleName, newRoleName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) roles.Role); ok {
		r0 = rf(ctx, token, entityID, oldRoleName, newRoleName)
	} else {
		r0 = ret.Get(0).(roles.Role)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(ctx, token, entityID, oldRoleName, newRoleName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRoles creates a new instance of Roles. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRoles(t interface {
	mock.TestingT
	Cleanup(func())
}) *Roles {
	mock := &Roles{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
