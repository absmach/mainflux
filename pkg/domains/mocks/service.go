// Code generated by mockery v2.43.2. DO NOT EDIT.

// Copyright (c) Abstract Machines

package mocks

import (
	context "context"

	domains "github.com/absmach/magistrala/pkg/domains"
	mock "github.com/stretchr/testify/mock"

	roles "github.com/absmach/magistrala/pkg/roles"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// AddNewEntityRoles provides a mock function with given fields: ctx, entityID, newEntityDefaultRoles, optionalPolicies
func (_m *Service) AddNewEntityRoles(ctx context.Context, entityID string, newEntityDefaultRoles map[string][]string, optionalPolicies []roles.OptionalPolicy) ([]roles.Role, error) {
	ret := _m.Called(ctx, entityID, newEntityDefaultRoles, optionalPolicies)

	if len(ret) == 0 {
		panic("no return value specified for AddNewEntityRoles")
	}

	var r0 []roles.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string][]string, []roles.OptionalPolicy) ([]roles.Role, error)); ok {
		return rf(ctx, entityID, newEntityDefaultRoles, optionalPolicies)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string][]string, []roles.OptionalPolicy) []roles.Role); ok {
		r0 = rf(ctx, entityID, newEntityDefaultRoles, optionalPolicies)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]roles.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, map[string][]string, []roles.OptionalPolicy) error); ok {
		r1 = rf(ctx, entityID, newEntityDefaultRoles, optionalPolicies)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddRole provides a mock function with given fields: ctx, entityID, roleName, optionalOperations, optionalMembers
func (_m *Service) AddRole(ctx context.Context, entityID string, roleName string, optionalOperations []roles.Operation, optionalMembers []string) (roles.Role, error) {
	ret := _m.Called(ctx, entityID, roleName, optionalOperations, optionalMembers)

	if len(ret) == 0 {
		panic("no return value specified for AddRole")
	}

	var r0 roles.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []roles.Operation, []string) (roles.Role, error)); ok {
		return rf(ctx, entityID, roleName, optionalOperations, optionalMembers)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []roles.Operation, []string) roles.Role); ok {
		r0 = rf(ctx, entityID, roleName, optionalOperations, optionalMembers)
	} else {
		r0 = ret.Get(0).(roles.Role)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, []roles.Operation, []string) error); ok {
		r1 = rf(ctx, entityID, roleName, optionalOperations, optionalMembers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeDomainStatus provides a mock function with given fields: ctx, token, id, d
func (_m *Service) ChangeDomainStatus(ctx context.Context, token string, id string, d domains.DomainReq) (domains.Domain, error) {
	ret := _m.Called(ctx, token, id, d)

	if len(ret) == 0 {
		panic("no return value specified for ChangeDomainStatus")
	}

	var r0 domains.Domain
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, domains.DomainReq) (domains.Domain, error)); ok {
		return rf(ctx, token, id, d)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, domains.DomainReq) domains.Domain); ok {
		r0 = rf(ctx, token, id, d)
	} else {
		r0 = ret.Get(0).(domains.Domain)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, domains.DomainReq) error); ok {
		r1 = rf(ctx, token, id, d)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDomain provides a mock function with given fields: ctx, token, d
func (_m *Service) CreateDomain(ctx context.Context, token string, d domains.Domain) (domains.Domain, error) {
	ret := _m.Called(ctx, token, d)

	if len(ret) == 0 {
		panic("no return value specified for CreateDomain")
	}

	var r0 domains.Domain
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domains.Domain) (domains.Domain, error)); ok {
		return rf(ctx, token, d)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domains.Domain) domains.Domain); ok {
		r0 = rf(ctx, token, d)
	} else {
		r0 = ret.Get(0).(domains.Domain)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domains.Domain) error); ok {
		r1 = rf(ctx, token, d)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDomains provides a mock function with given fields: ctx, token, page
func (_m *Service) ListDomains(ctx context.Context, token string, page domains.Page) (domains.DomainsPage, error) {
	ret := _m.Called(ctx, token, page)

	if len(ret) == 0 {
		panic("no return value specified for ListDomains")
	}

	var r0 domains.DomainsPage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domains.Page) (domains.DomainsPage, error)); ok {
		return rf(ctx, token, page)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domains.Page) domains.DomainsPage); ok {
		r0 = rf(ctx, token, page)
	} else {
		r0 = ret.Get(0).(domains.DomainsPage)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domains.Page) error); ok {
		r1 = rf(ctx, token, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveRole provides a mock function with given fields: ctx, entityID, roleName
func (_m *Service) RemoveRole(ctx context.Context, entityID string, roleName string) error {
	ret := _m.Called(ctx, entityID, roleName)

	if len(ret) == 0 {
		panic("no return value specified for RemoveRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, entityID, roleName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RetrieveAllRoles provides a mock function with given fields: ctx, entityID, limit, offset
func (_m *Service) RetrieveAllRoles(ctx context.Context, entityID string, limit uint64, offset uint64) (roles.RolePage, error) {
	ret := _m.Called(ctx, entityID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveAllRoles")
	}

	var r0 roles.RolePage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64, uint64) (roles.RolePage, error)); ok {
		return rf(ctx, entityID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64, uint64) roles.RolePage); ok {
		r0 = rf(ctx, entityID, limit, offset)
	} else {
		r0 = ret.Get(0).(roles.RolePage)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, uint64, uint64) error); ok {
		r1 = rf(ctx, entityID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveDomain provides a mock function with given fields: ctx, token, id
func (_m *Service) RetrieveDomain(ctx context.Context, token string, id string) (domains.Domain, error) {
	ret := _m.Called(ctx, token, id)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveDomain")
	}

	var r0 domains.Domain
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (domains.Domain, error)); ok {
		return rf(ctx, token, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) domains.Domain); ok {
		r0 = rf(ctx, token, id)
	} else {
		r0 = ret.Get(0).(domains.Domain)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, token, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveRole provides a mock function with given fields: ctx, entityID, roleName
func (_m *Service) RetrieveRole(ctx context.Context, entityID string, roleName string) (roles.Role, error) {
	ret := _m.Called(ctx, entityID, roleName)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveRole")
	}

	var r0 roles.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (roles.Role, error)); ok {
		return rf(ctx, entityID, roleName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) roles.Role); ok {
		r0 = rf(ctx, entityID, roleName)
	} else {
		r0 = ret.Get(0).(roles.Role)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, entityID, roleName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoleAddMembers provides a mock function with given fields: ctx, entityID, roleName, members
func (_m *Service) RoleAddMembers(ctx context.Context, entityID string, roleName string, members []string) ([]string, error) {
	ret := _m.Called(ctx, entityID, roleName, members)

	if len(ret) == 0 {
		panic("no return value specified for RoleAddMembers")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string) ([]string, error)); ok {
		return rf(ctx, entityID, roleName, members)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string) []string); ok {
		r0 = rf(ctx, entityID, roleName, members)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, []string) error); ok {
		r1 = rf(ctx, entityID, roleName, members)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoleAddOperation provides a mock function with given fields: ctx, entityID, roleName, operations
func (_m *Service) RoleAddOperation(ctx context.Context, entityID string, roleName string, operations []roles.Operation) ([]roles.Operation, error) {
	ret := _m.Called(ctx, entityID, roleName, operations)

	if len(ret) == 0 {
		panic("no return value specified for RoleAddOperation")
	}

	var r0 []roles.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []roles.Operation) ([]roles.Operation, error)); ok {
		return rf(ctx, entityID, roleName, operations)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []roles.Operation) []roles.Operation); ok {
		r0 = rf(ctx, entityID, roleName, operations)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]roles.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, []roles.Operation) error); ok {
		r1 = rf(ctx, entityID, roleName, operations)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoleCheckMembersExists provides a mock function with given fields: ctx, entityID, roleName, members
func (_m *Service) RoleCheckMembersExists(ctx context.Context, entityID string, roleName string, members []string) (bool, error) {
	ret := _m.Called(ctx, entityID, roleName, members)

	if len(ret) == 0 {
		panic("no return value specified for RoleCheckMembersExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string) (bool, error)); ok {
		return rf(ctx, entityID, roleName, members)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string) bool); ok {
		r0 = rf(ctx, entityID, roleName, members)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, []string) error); ok {
		r1 = rf(ctx, entityID, roleName, members)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoleCheckOperationsExists provides a mock function with given fields: ctx, entityID, roleName, operations
func (_m *Service) RoleCheckOperationsExists(ctx context.Context, entityID string, roleName string, operations []roles.Operation) (bool, error) {
	ret := _m.Called(ctx, entityID, roleName, operations)

	if len(ret) == 0 {
		panic("no return value specified for RoleCheckOperationsExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []roles.Operation) (bool, error)); ok {
		return rf(ctx, entityID, roleName, operations)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []roles.Operation) bool); ok {
		r0 = rf(ctx, entityID, roleName, operations)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, []roles.Operation) error); ok {
		r1 = rf(ctx, entityID, roleName, operations)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoleListMembers provides a mock function with given fields: ctx, entityID, roleName, limit, offset
func (_m *Service) RoleListMembers(ctx context.Context, entityID string, roleName string, limit uint64, offset uint64) (roles.MembersPage, error) {
	ret := _m.Called(ctx, entityID, roleName, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for RoleListMembers")
	}

	var r0 roles.MembersPage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, uint64, uint64) (roles.MembersPage, error)); ok {
		return rf(ctx, entityID, roleName, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, uint64, uint64) roles.MembersPage); ok {
		r0 = rf(ctx, entityID, roleName, limit, offset)
	} else {
		r0 = ret.Get(0).(roles.MembersPage)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, uint64, uint64) error); ok {
		r1 = rf(ctx, entityID, roleName, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoleListOperations provides a mock function with given fields: ctx, entityID, roleName
func (_m *Service) RoleListOperations(ctx context.Context, entityID string, roleName string) ([]roles.Operation, error) {
	ret := _m.Called(ctx, entityID, roleName)

	if len(ret) == 0 {
		panic("no return value specified for RoleListOperations")
	}

	var r0 []roles.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]roles.Operation, error)); ok {
		return rf(ctx, entityID, roleName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []roles.Operation); ok {
		r0 = rf(ctx, entityID, roleName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]roles.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, entityID, roleName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoleRemoveAllMembers provides a mock function with given fields: ctx, entityID, roleName
func (_m *Service) RoleRemoveAllMembers(ctx context.Context, entityID string, roleName string) error {
	ret := _m.Called(ctx, entityID, roleName)

	if len(ret) == 0 {
		panic("no return value specified for RoleRemoveAllMembers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, entityID, roleName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RoleRemoveAllOperations provides a mock function with given fields: ctx, entityID, roleName
func (_m *Service) RoleRemoveAllOperations(ctx context.Context, entityID string, roleName string) error {
	ret := _m.Called(ctx, entityID, roleName)

	if len(ret) == 0 {
		panic("no return value specified for RoleRemoveAllOperations")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, entityID, roleName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RoleRemoveMembers provides a mock function with given fields: ctx, entityID, roleName, members
func (_m *Service) RoleRemoveMembers(ctx context.Context, entityID string, roleName string, members []string) error {
	ret := _m.Called(ctx, entityID, roleName, members)

	if len(ret) == 0 {
		panic("no return value specified for RoleRemoveMembers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string) error); ok {
		r0 = rf(ctx, entityID, roleName, members)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RoleRemoveOperations provides a mock function with given fields: ctx, entityID, roleName, operations
func (_m *Service) RoleRemoveOperations(ctx context.Context, entityID string, roleName string, operations []roles.Operation) error {
	ret := _m.Called(ctx, entityID, roleName, operations)

	if len(ret) == 0 {
		panic("no return value specified for RoleRemoveOperations")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []roles.Operation) error); ok {
		r0 = rf(ctx, entityID, roleName, operations)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDomain provides a mock function with given fields: ctx, token, id, d
func (_m *Service) UpdateDomain(ctx context.Context, token string, id string, d domains.DomainReq) (domains.Domain, error) {
	ret := _m.Called(ctx, token, id, d)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDomain")
	}

	var r0 domains.Domain
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, domains.DomainReq) (domains.Domain, error)); ok {
		return rf(ctx, token, id, d)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, domains.DomainReq) domains.Domain); ok {
		r0 = rf(ctx, token, id, d)
	} else {
		r0 = ret.Get(0).(domains.Domain)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, domains.DomainReq) error); ok {
		r1 = rf(ctx, token, id, d)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRoleName provides a mock function with given fields: ctx, entityID, oldRoleName, newRoleName
func (_m *Service) UpdateRoleName(ctx context.Context, entityID string, oldRoleName string, newRoleName string) (roles.Role, error) {
	ret := _m.Called(ctx, entityID, oldRoleName, newRoleName)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRoleName")
	}

	var r0 roles.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (roles.Role, error)); ok {
		return rf(ctx, entityID, oldRoleName, newRoleName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) roles.Role); ok {
		r0 = rf(ctx, entityID, oldRoleName, newRoleName)
	} else {
		r0 = ret.Get(0).(roles.Role)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, entityID, oldRoleName, newRoleName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
