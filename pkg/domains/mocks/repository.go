// Code generated by mockery v2.43.2. DO NOT EDIT.

// Copyright (c) Abstract Machines

package mocks

import (
	context "context"

	domains "github.com/absmach/magistrala/pkg/domains"
	mock "github.com/stretchr/testify/mock"
)

// DomainsRepository is an autogenerated mock type for the DomainsRepository type
type DomainsRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *DomainsRepository) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListDomains provides a mock function with given fields: ctx, pm
func (_m *DomainsRepository) ListDomains(ctx context.Context, pm domains.Page) (domains.DomainsPage, error) {
	ret := _m.Called(ctx, pm)

	if len(ret) == 0 {
		panic("no return value specified for ListDomains")
	}

	var r0 domains.DomainsPage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domains.Page) (domains.DomainsPage, error)); ok {
		return rf(ctx, pm)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domains.Page) domains.DomainsPage); ok {
		r0 = rf(ctx, pm)
	} else {
		r0 = ret.Get(0).(domains.DomainsPage)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domains.Page) error); ok {
		r1 = rf(ctx, pm)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveAllByIDs provides a mock function with given fields: ctx, pm
func (_m *DomainsRepository) RetrieveAllByIDs(ctx context.Context, pm domains.Page) (domains.DomainsPage, error) {
	ret := _m.Called(ctx, pm)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveAllByIDs")
	}

	var r0 domains.DomainsPage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domains.Page) (domains.DomainsPage, error)); ok {
		return rf(ctx, pm)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domains.Page) domains.DomainsPage); ok {
		r0 = rf(ctx, pm)
	} else {
		r0 = ret.Get(0).(domains.DomainsPage)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domains.Page) error); ok {
		r1 = rf(ctx, pm)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveByID provides a mock function with given fields: ctx, id
func (_m *DomainsRepository) RetrieveByID(ctx context.Context, id string) (domains.Domain, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveByID")
	}

	var r0 domains.Domain
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domains.Domain, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domains.Domain); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domains.Domain)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, d
func (_m *DomainsRepository) Save(ctx context.Context, d domains.Domain) (domains.Domain, error) {
	ret := _m.Called(ctx, d)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 domains.Domain
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domains.Domain) (domains.Domain, error)); ok {
		return rf(ctx, d)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domains.Domain) domains.Domain); ok {
		r0 = rf(ctx, d)
	} else {
		r0 = ret.Get(0).(domains.Domain)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domains.Domain) error); ok {
		r1 = rf(ctx, d)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, userID, d
func (_m *DomainsRepository) Update(ctx context.Context, id string, userID string, d domains.DomainReq) (domains.Domain, error) {
	ret := _m.Called(ctx, id, userID, d)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 domains.Domain
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, domains.DomainReq) (domains.Domain, error)); ok {
		return rf(ctx, id, userID, d)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, domains.DomainReq) domains.Domain); ok {
		r0 = rf(ctx, id, userID, d)
	} else {
		r0 = ret.Get(0).(domains.Domain)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, domains.DomainReq) error); ok {
		r1 = rf(ctx, id, userID, d)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDomainsRepository creates a new instance of DomainsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDomainsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *DomainsRepository {
	mock := &DomainsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
